{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Hello World ECS Application service Task",
  "Parameters": {
    "ENV": {
      "Description": "Deploy Environment, e.g. dev, prod, uat, test",
      "Type": "String",
      "Default": "dev"
    },
    "DesiredContainers": {
      "Default": "1",
      "ConstraintDescription": "Malformed input-Parameter MyParameter must match pattern [1-9]+",
      "Type": "Number",
      "Description": "No of Containers to run"
    },
    "serviceDockerImageURL": {
      "Default": "",
      "ConstraintDescription": "",
      "Type": "String",
      "Description": "Docker Image URL"
    },
    "ResourcesServicesStackName": {
      "Default": "",
      "Type": "String",
      "Description": "Resources Services Stack Name"
    },
    "ServiceName": {
      "Default": "",
      "Type": "String",
      "Description": "Name of the service to be used in service discovery"
    },
    "ServiceVersion": {
      "Default": "1.1.1",
      "Type": "String",
      "Description": "Version of the service to be used in service discovery "
    }
  },
  "Mappings": {
    "EnvMap": {
      "dev":{
        "test": "test"
      }
    }
  },
  "Resources": {
    "ResourcesServicesInfo": {
      "Type": "Custom::ResourcesServicesInfo",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "LookupStackOutputs",
            "Arn"
          ]
        },
        "StackName": {
          "Ref": "ResourcesServicesStackName"
        }
      }
    },
    "LookupStackOutputs": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "LambdaExecutionRole",
            "Arn"
          ]
        },
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "var response = require('cfn-response');",
                "exports.handler = function(event, context) {",
                "    console.log('REQUEST RECEIVED:\\n', JSON.stringify(event));",
                "    if (event.RequestType == 'Delete') {",
                "        response.send(event, context, response.SUCCESS);",
                "        return;",
                "    }",
                "    var stackName = event.ResourceProperties.StackName;",
                "    var responseData = {};",
                "    if (stackName) {",
                "        var aws = require('aws-sdk');",
                "        var cfn = new aws.CloudFormation();",
                "        cfn.describeStacks({StackName: stackName}, function(err, data) {",
                "            if (err) {",
                "                responseData = {Error: 'DescribeStacks call failed'};",
                "                console.log(responseData.Error + ':\\n', err);",
                "                response.send(event, context, response.FAILED, responseData);",
                "            }",
                "            else {",
                "                data.Stacks[0].Outputs.forEach(function(output) {",
                "                    responseData[output.OutputKey] = output.OutputValue;",
                "                });",
                "                response.send(event, context, response.SUCCESS, responseData);",
                "            }",
                "        });",
                "    } else {",
                "        responseData = {Error: 'Stack name not specified'};",
                "        console.log(responseData.Error);",
                "        response.send(event, context, response.FAILED, responseData);",
                "    }",
                "};"
              ]
            ]
          }
        },
        "Runtime": "nodejs",
        "Timeout": "30"
      }
    },
    "LambdaExecutionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudformation:DescribeStacks"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "microservicedefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties": {
        "ContainerDefinitions": [
          {
            "LogConfiguration": {
              "LogDriver": "awslogs",
              "Options": {
                "awslogs-group": {
                  "Fn::GetAtt": [
                    "ResourcesServicesInfo",
                    "serviceLogGroup"
                  ]
                },
                "awslogs-region": {
                  "Ref": "AWS::Region"
                }
              }
            },
            "Name": "docker-coin-rng",
            "Image": {
              "Ref": "serviceDockerImageURL"
            },
            "Essential": true,
            "PortMappings": [
              {
                "ContainerPort": 80,
                "HostPort": 0
              }
            ],
            "Command": [],
            "Memory": 512,
            "Cpu": 20,
            "Environment":[
              {
                "Name": "ENV",
                "Value": {"Ref":"ENV"}
              },
              {
                "Name": "SERVICE_NAME",
                "Value": {"Ref":"ServiceName"}
              },
              {
                "Name": "SERVICE_TAGS",
                "Value": {"Ref":"ServiceVersion"}
              }
            ]
          }
        ]
      }
    },
    "microserviceECSService": {
      "Type": "AWS::ECS::Service",
      "Properties": {
        "Cluster": {
          "Fn::GetAtt": [
            "ResourcesServicesInfo",
            "serviceECSCluster"
          ]
        },
        "DeploymentConfiguration": {
          "MinimumHealthyPercent": 50,
          "MaximumPercent": 100
        },
        "TaskDefinition": {
          "Ref": "microservicedefinition"
        },
        "DesiredCount": {
          "Ref": "DesiredContainers"
        }
      }
    }
  }
}
